from typing import Optional
import subprocess
from bioinformatics_mcp.tool_decorator import collect_tool
from bioinformatics_mcp.core.snake_wrapper import run_snake_wrapper


def run_vsearch(
    *,
    input_files: str,
    output_files: str,
    extra: Optional[str] = None,
    log: Optional[str] = None,
     
) -> subprocess.CompletedProcess:
    """
    Versatile open-source tool for microbiome analysis.

    Args:
        input_files: Input file(s) to be processed by VSEARCH.
        output_files: Output file(s) to be generated by VSEARCH.
        extra (optional): Additional program arguments.
        log (optional): Log file name to capture VSEARCH logs.
  
    Returns:
        CompletedProcess instance containing information about the completed Snakemake process.
    """
    inputs = {"input_files": input_files}
    outputs = {"output_files": output_files}
    params = {"extra": extra} if extra else {}
    if log:
        params["log"] = log

    return run_snake_wrapper(
        wrapper="file:bioinformatics_mcp/vsearch",
        inputs=inputs,
        outputs=outputs,
        params=params,
         
    )


@collect_tool()
def vsearch(
    *,
    input_files: str,
    output_files: str,
    extra: Optional[str] = None,
    log: Optional[str] = None,
     
) -> subprocess.CompletedProcess:
    """
    Versatile open-source tool for microbiome analysis.

    Args:
        input_files: Input file(s) to be processed by VSEARCH.
        output_files: Output file(s) to be generated by VSEARCH.
        extra (optional): Additional program arguments.
        log (optional): Log file name to capture VSEARCH logs.
  
    Returns:
        CompletedProcess instance containing information about the completed Snakemake process.
    """
    return run_vsearch(
        input_files=input_files,
        output_files=output_files,
        extra=extra,
        log=log,
         
    )
