import pytest
from pathlib import Path


@pytest.fixture
def test_paths():
    """Set up test paths."""
    base_dir = Path(__file__).parent.parent
    test_dir = base_dir / "test"
    return {
        "bam_file": test_dir / "test.bam",
        "expected_snakefile": test_dir / "Snakefile",
        "expected_output": test_dir / "expected_output.bam",
    }


def test_snakefile_split(test_paths, tmp_path, capsys):
    """Test that split generates the expected Snakefile."""
    from bioinformatics_mcp.bamtools.split.run_split import run_split

    run_split(
        bam_file=str(test_paths["bam_file"]),
        print_only=True,
    )

    captured = capsys.readouterr()
    content = captured.out

    assert "rule split:" in content, "Missing rule definition in Snakefile"
    assert "input:" in content, "Missing input section in Snakefile"
    assert "output:" in content, "Missing output section in Snakefile"
    assert "wrapper:" in content, "Missing wrapper section in Snakefile"
    assert "bam_file=" in content, "Missing bam_file parameter in Snakefile"


def test_run_split(test_paths, tmp_path):
    """Test that split can be run with the test files."""
    from bioinformatics_mcp.bamtools.split.run_split import run_split

    temp_output_dir = tmp_path / "output"
    temp_output_dir.mkdir()

    result = run_split(
        bam_file=str(test_paths["bam_file"]),
        output=str(temp_output_dir),
    )

    assert result.returncode == 0, "Bamtools split run failed"
    assert any(temp_output_dir.iterdir()), "No output files generated by bamtools split"