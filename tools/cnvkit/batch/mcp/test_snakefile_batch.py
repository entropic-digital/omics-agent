import pytest
from pathlib import Path


@pytest.fixture
def test_paths():
    """Set up test paths for inputs and outputs."""
    base_dir = Path(__file__).parent
    test_dir = base_dir / "test_files"
    return {
        "bam_input": test_dir / "test.bam",
        "reference": test_dir / "reference.cnn",
        "fasta": test_dir / "reference.fasta",
        "antitarget": test_dir / "antitarget.bed",
        "target": test_dir / "target.bed",
        "mappability": test_dir / "mappability.txt",
        "expected_snakefile": test_dir / "Snakefile"
    }


def test_snakefile_batch(test_paths, tmp_path, capsys):
    """Test that batch generates the expected Snakefile."""
    from run_batch import run_batch

    # Create temp output directory
    temp_output_dir = tmp_path / "output"
    temp_output_dir.mkdir()

    # Generate the Snakefile with print_only=True to capture its content
    run_batch(
        bam=[str(test_paths["bam_input"])],
        reference=str(test_paths["reference"]),
        fasta=str(test_paths["fasta"]),
        antitarget=str(test_paths["antitarget"]),
        target=str(test_paths["target"]),
        mappability=str(test_paths["mappability"]),
        print_only=True
    )

    captured = capsys.readouterr()
    content = captured.out

    # Assertions to verify all essential rule elements in the Snakefile
    assert "rule batch:" in content, "Missing rule definition in Snakefile"
    assert "input:" in content, "Missing input section in Snakefile"
    assert "output:" in content, "Missing output section in Snakefile"
    assert "wrapper:" in content, "Missing wrapper section in Snakefile"

    # Assertions to verify all required inputs are present
    assert "bam=" in content, "Missing bam parameter in Snakefile"
    assert "reference=" in content, "Missing reference parameter in Snakefile"
    assert "fasta=" in content, "Missing fasta parameter in Snakefile"
    assert "antitarget=" in content, "Missing antitarget parameter in Snakefile"
    assert "target=" in content, "Missing target parameter in Snakefile"
    assert "mappability=" in content, "Missing mappability parameter in Snakefile"


def test_run_batch(test_paths, tmp_path):
    """Test that batch can be run with the test files."""
    from run_batch import run_batch

    # Create temp output directory
    temp_output_dir = tmp_path / "output"
    temp_output_dir.mkdir()

    # Execute the batch run
    result = run_batch(
        bam=[str(test_paths["bam_input"])],
        reference=str(test_paths["reference"]),
        fasta=str(test_paths["fasta"]),
        antitarget=str(test_paths["antitarget"]),
        target=str(test_paths["target"]),
        mappability=str(test_paths["mappability"]),
        extra="--some_extra_param"
    )

    # Verify successful execution
    assert result.returncode == 0, f"Batch run failed with returncode {result.returncode}"

    # Verify that expected files were generated
    # (e.g., output files would depend on the tool's behavior and meta.yaml)
    output_files = list(temp_output_dir.glob("*"))
    assert len(output_files) > 0, "No output files were generated by the batch run"
    assert any(f.suffix in [".cnr", ".cns", ".cnn"] for f in output_files), \
        "Expected CNVkit result files (.cnr/.cns/.cnn) not found"