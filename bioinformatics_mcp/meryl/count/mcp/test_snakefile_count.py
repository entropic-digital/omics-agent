import pytest
from pathlib import Path


@pytest.fixture
def test_paths():
    """Set up test paths."""
    base_dir = Path(__file__).parent.parent
    test_dir = base_dir / "test"
    return {
        "fasta_file": test_dir / "test.fasta",
        "meryl_database": test_dir / "test.meryl",
        "expected_snakefile": test_dir / "Snakefile",
    }


def test_snakefile_count(test_paths, tmp_path, capsys):
    """Test that meryl count generates the expected Snakefile."""
    from bioinformatics_mcp.meryl.count.run_count import run_count
    temp_output = tmp_path / "output.meryl"

    run_count(
        fasta_file=str(test_paths["fasta_file"]),
        meryl_database=str(temp_output),
        command="count",
        extra="k=21",
        print_only=True,
    )

    captured = capsys.readouterr()
    content = captured.out

    assert "rule count:" in content, "Missing rule definition in Snakefile"
    assert "input:" in content, "Missing input section in Snakefile"
    assert "output:" in content, "Missing output section in Snakefile"
    assert "params:" in content, "Missing params section in Snakefile"
    assert "wrapper:" in content, "Missing wrapper section in Snakefile"
    assert "fasta_file=" in content, "Missing fasta_file input in Snakefile"
    assert "meryl_database=" in content, "Missing meryl_database output in Snakefile"
    assert "extra=" in content, "Missing extra parameter in Snakefile"
    assert "command=" in content, "Missing command parameter in Snakefile"


def test_run_count(test_paths, tmp_path):
    """Test that meryl count can run with the test files."""
    from bioinformatics_mcp.meryl.count.run_count import run_count
    temp_output = tmp_path / "output.meryl"

    result = run_count(
        fasta_file=str(test_paths["fasta_file"]),
        meryl_database=str(temp_output),
        command="count",
        extra="k=21",
    )

    assert result.returncode == 0, "meryl count run failed"
    assert temp_output.exists(), "Output file not generated by meryl count"